# -*- coding: utf-8 -*-
"""Ejercicios Modulo 1 PYTHON

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18ozV9Qa0_yIFEPSah0ABprKXb50kn57s
"""

#EJERCICIO 1
for i in range(73):
    print("Hello World")

#EJERCICIO 2
def fibonacci(n):
    a, b = 0, 1
    for i in range(n):
        a, b = b, a + b
    return a
n = 73
resultado = fibonacci(n)
print(fibonacci(n))

#EJERCICIO 3
#A
import pandas as pd
import numpy as np
t = np.arange(0, 4.02, 0.02)

df = pd.DataFrame({'t': t})

df

#B
s = np.sin(t)
df = pd.DataFrame({'t': t, 's': s})

df

#C
df['s10'] = df['s'].shift(10, fill_value=0)

df

#D
df['d'] = df['s'] - df['s10']

df

#E
p = []

for i in df['d']:
    if i > 0:
        p.append(1)
    else:
        p.append(0)
df['p'] = p
df

#F
df.to_csv('resultado.csv', sep=';', index=False, decimal=',')

from google.colab import files
files.download('resultado.csv')

#4 # Carga el archivo creado en un nuevo programa
#A  #La última columna m será la media de los valores positivos si p es 1 y la media de los valores negativos si p es 0. Sugerencia: los métodos groupby y transform pueden encadenarse.

# Cargar el archivo
df = pd.read_csv('resultado.csv', sep=';', decimal=',')

# Crear la columna `m` con la media de los valores de `d` agrupados por `p`
df['m'] = df.groupby('p')['d'].transform(lambda x: x[x > 0].mean() if x.name == 1 else x[x < 0].mean())

# Mostrar el DataFrame resultante
print(df)

#B  #Crea finalmente un data frame de solo dos filas con el sumatorio de los valores negativos de la columna d y el sumatorio de los valores positivos de la columna d. Sugerencia: El método groupby será suficiente.
# Cálculo de el sumatorio de los valores positivos y negativos de la columna `d`
sumatorio = df.groupby('p')['d'].sum().reset_index()

# Renombrar las filas para mayor claridad
sumatorio['descripcion'] = sumatorio['p'].apply(lambda x: 'Sumatorio positivos' if x == 1 else 'Sumatorio negativos')

# Reorganizar el DataFrame para que solo tenga dos filas con la descripción y el sumatorio
resultado = sumatorio[['descripcion', 'd']].rename(columns={'d': 'sumatorio'})

# Mostrar el DataFrame final
print(resultado)

#5
# MODIFY EACH STEP IN ORDER TO RUN COMPLETELY THE PROGRAM

# STEP 1
print('STEP 1')

for i in range(0, 11):
    x = i  # Corregido: Indentación
print(f'x should be 10: {x}')
if x == 10:
    print('SUCCESS! IN STEP 1')

# STEP 2
print('STEP 2')
x = True  # Corregido: Cambiar a True para que el ciclo funcione como se espera

for i in range(0, 11):
    x = x and True
    if x and i == 5:
        break

print(f'x should be True: {x}')
print(f'i should be 5: {i}')
if i == 5 and x:
    print('SUCCESS! IN STEP 2')
    print('SUCCESS! IN STEP 2')

#6 Calcula el septuagésimo tercer (73º) número primo.

def es_primo(num):
    if num < 2:
        return False
    for i in range(2, int(num ** 0.5) + 1):
        if num % i == 0:
            return False
    return True

#Definir lista de numeros primos
primos = []

limite = 100000
for num in range(2, limite + 1):
    if es_primo(num):
        primos.append(num)

primos[:73]

print(primos[72])

#7
import numpy as np

def es_primo(n):

    if n < 2:
        return False
    for i in range(2, int(np.sqrt(n)) + 1):
        if n % i == 0:
            return False
    return True

def encontrar_intervalo_no_primos(longitud):
    consecutivos = 0
    numero = 2
    intervalo = []

    while True:
        if not es_primo(numero):
            consecutivos += 1
            intervalo.append(numero)
        else:
            consecutivos = 0
            intervalo = []

        if consecutivos == longitud:
            return intervalo

        numero += 1

intervalo_no_primos = encontrar_intervalo_no_primos(73)
print(f"Primer intervalo de 73 números no primos consecutivos: {intervalo_no_primos}")

#EJERCICIO EXTRA
#Sumatorio de todos los numeros de la serie del 1 al 200

suma = sum(range(1, 201))

suma

#EJERCICIO EXTRA
#Sumar los 200 primeros numeros de la serie aritmetica con incremento 1 que comienza en 1 y alternan uno positivo y uno negativo. Es decir: 1,-2,3,-4,5,-6...

serie = [(i if i % 2 != 0 else -i) for i in range(1, 201)]

suma_serie = sum(serie)

suma_serie

#EJERCICIO EXTRA #Asigna un vector de numeros aleatorios y ese vetor asignarle dos rangos y contar cuantos son mayores que 0,5 y menores que 0,5

import numpy as np
vector = np.random.rand(100)
mayores = 0
menores = 0

for num in vector:
    if num > 0.5:
        mayores += 1
    else:
        menores += 1

print(vector)
print(f"Hay {mayores} elementos mayores que 0.5 y {menores} elementos menores o iguales que 0.5.")

#EJERCICIO EXTRA
import pandas as pd
import matplotlib.pyplot as plt
df = pd.DataFrame()
df["t"] = [i for i in range(10)]
df["s"] = [2**i for i in range(10)]
df["d"] = df["t"]-df["s"]
df
plt.scatter(df["s"],df["d"])
plt.show()

