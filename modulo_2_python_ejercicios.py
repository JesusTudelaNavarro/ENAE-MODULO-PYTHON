# -*- coding: utf-8 -*-
"""MODULO 2 PYTHON ejercicios

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18ozV9Qa0_yIFEPSah0ABprKXb50kn57s
"""

#EJERCICIO 1
for i in range(73):
    print("Hello World")

#EJERCICIO 2
def fibonacci(n):
    a, b = 0, 1
    for i in range(n):
        a, b = b, a + b
    return a
n = 73
resultado = fibonacci(n)
print(fibonacci(n))

#EJERCICIO 3
#A
import pandas as pd
import numpy as np
t = np.arange(0, 4.02, 0.02)

df = pd.DataFrame({'t': t})

df

#B
s = np.sin(t)
df = pd.DataFrame({'t': t, 's': s})

df

#C
df['s10'] = df['s'].shift(10, fill_value=0)

df

#D
df['d'] = df['s'] - df['s10']

df

#P
df['p'] = df['d'].apply(lambda x: 1 if x > 0 else 0)
df

#P con bucle
p = []

for i in df['d']:
    if i > 0:
        p.append(1)
    else:
        p.append(0)
df['p_bucle'] = p
df

#4

#EJERCICIO EXTRA
#Sumatorio de todos los numeros de la serie del 1 al 200

suma = sum(range(1, 201))

suma

#EJERCICIO EXTRA
#Sumar los 200 primeros numeros de la serie aritmetica con incremento 1 que comienza en 1 y alternan uno positivo y uno negativo. Es decir: 1,-2,3,-4,5,-6...

serie = [(i if i % 2 != 0 else -i) for i in range(1, 201)]

suma_serie = sum(serie)

suma_serie

#6 Calcula el septuagésimo tercer (73º) número primo.

#Saber si es primo
def es_primo(num):
    if num < 2:
        return False
    for i in range(2, int(num ** 0.5) + 1):
        if num % i == 0:
            return False
    return True

#Definir lista de numeros primos
primos = []

limite = 1000000
for num in range(2, limite + 1):
    if es_primo(num):
        primos.append(num)

primos[:73]

print(primos[72])

#EJERCICIO EXTRA #Asigna un vector de numeros aleatorios y ese vetor asignarle dos rangos y contar cuantos son mayores que 0,5 y menores que 0,5

import numpy as np
vector = np.random.rand(100)
mayores = 0
menores = 0

for num in vector:
    if num > 0.5:
        mayores += 1
    else:
        menores += 1

print(vector)
print(f"Hay {mayores} elementos mayores que 0.5 y {menores} elementos menores o iguales que 0.5.")

#EJERCICIO EXTRA
import pandas as pd
import matplotlib.pyplot as plt
df = pd.DataFrame()
df["t"] = [i for i in range(10)]
df["s"] = [2**i for i in range(10)]
df["d"] = df["t"]-df["s"]
df
plt.scatter(df["s"],df["d"])
plt.show()

#EJERCICIO EXTRA - IMPLEMENTA UN MLP CON UNA ENTRADA Y UNA SALIDA EN TORCH Y ENTRENALO CON UN SET DE DATOS ALEATORIO
import torch
import torch.nn as nn
import torch.optim as optim
import numpy as np
import matplotlib.pyplot as plt

def MLP

